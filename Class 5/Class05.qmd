---
title: "Class 5: Data Viz"
author: "Juliane (PID: A17207807)"
format: pdf
---

## Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these let's play with the inbuilt `cars` dataset

```{r}
head(cars)
```

To use "base" R I can simply call the `plot()` function:

```{r}
plot(cars)
```

To use `ggplot2` package I first need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()`. Can I just call it

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot I need always at least 3 things:

-   **data** (i.e. what I want to plot)
-   **aes** the aesthetic mapping of the data to the plot I want.
-   the **geoms** i.e. How I want to plot the data

```{r}
ggplot(data=cars)+ 
  aes(x=speed, y=dist)+
  geom_point()
```

If I want to add more things I can just keep adding layers, e.g.

```{r}
ggplot(data=cars)+ 
  aes(x=speed, y=dist)+
  geom_point()+
  geom_smooth()
```

Ggplot is much more verbose than base R plots for standard plots but it has a consistent layer system that I can use to make just about any plot.

Let's make a plot with a straight line fit - i.e. a linear model and no standard error shown.

```{r}
ggplot(data=cars)+ 
  aes(x=speed, y=dist)+
  geom_point()+
  geom_smooth(se=FALSE, method="lm")+
  labs(title="Stopping Distance for Old Cars", 
       subtitle="From the inbuilt cars dataset", 
       caption="BIMM143",
       x="Speed (MPG)", y="Distance (ft)")+
  theme_bw()
```

## A more complicated plot

The code below reads the results of a differential expression analysis where a new anti-viral drug is being tested.

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q. How many genes are in this dataset?

```{r}
p<-ggplot(genes)+
  aes(x=Condition1, y=Condition2, color=State)+
  geom_point()
```

```{r}
p+labs(title="Gene Expressopn changes upon drug treatment",
       x="control", y="Drug treated")+
  scale_color_manual(values=c("blue","gray","red"))
```
## Going further

Here I read a slightly larger dataset

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

A very useful layer to add sometimes is for "faceting".

```{r}
ggplot(gapminder)+
  aes(gdpPercap, y=lifeExp, color=continent, size=pop)+
  geom_point(alpha=0.3)+
  facet_wrap(~continent)
```






