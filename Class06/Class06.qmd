---
title: "Class06: R Functions"
author: "Juliane Kwong"
format: pdf
---

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We can use the `mean()` function to calculate the average for a given student vector.

```{r}
mean(student1)
```
Use argument `na.rm=TRUE` to remove NA values from the student scores.

```{r}
mean(student2,na.rm=TRUE)
```
What about student 3?

```{r}
mean(student3, na.rm=TRUE)
```
We can replace the missed assignment NA values with a score of zero. Use the function `is.na()` to identify NA values.

```{r}
student3
is.na(student3)
which(is.na(student3))
```
Now replace the NA values with a score of zero.

```{r}
student3[is.na(student3)]<-0
student3
```
Use temp object (`x`) so that original objects aren't ruined.

```{r}
x<-student3
x[is.na(x)]<-0
mean(x)
```

Finally, we want to drop the lowest score before calculating the mean. This is equivalent to allowing the student to drop their worst assignment score. Use the `min()` function to identify the lowest score.

```{r}
x<-student1
min(x)
```
Identify the location of the minimum using the function `which.min()`.

```{r}
which.min(x)
```
Exclude the minimum score from the average.

```{r}
#The 8th vector contains the lowest score, this will exclude the 8th vector from the list of scores.
x[-8]
```

Use the `-which.min()` function to drop the lowest score from the students scores.

```{r}
x[-which.min(x)]
```

Find the mean that excludes the lowest score.
```{r}
x<-student1

#Map/Replace NA values to zero
x[is.na(x)]<-0

#Exclude the lowest score and calulate the mean
mean(x[-which.min(x)])
```

Convert the code snippets into a function called `grade()`.

All functions in R have at least 3 things:

- **Name**, in our case "grade"
- Input **arguments**, student1 etc.
- **Body**, this is our working snippet above.

```{r}
grade<-function(x){
  #Map/Replace NA values to zero
  x[is.na(x)]<-0

  #Exclude the lowest score and calulate the mean
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
```
Can also use RStudio to create a function using code snippets. 
Select `Code > Extract Function`

```{r}
grade <- function(x) {
  x[is.na(x)]<-0
  mean(x[-which.min(x)])
}
```

```{r}
grade(student2)
```

Read example class gradebook in CSV format: “https://tinyurl.com/gradeinput”
```{r}
url<-"https://tinyurl.com/gradeinput"
read.csv(url)
hw<-read.csv(url,row.names=1)
```

We can use the `apply()` function to grade all the students in this class with our new `grade()` function.

The `apply()` function allows us to run any function over either the rows or columns of a data.frame. 

Format for `apply()`: apply(DATA, MARGIN=1, FUNCTION)

```{r}
apply(hw,1,grade)
#Assign temp object to apply function
ans <- apply(hw,1,grade)
ans
```

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

Use the function `which.max()` to determine the highest score and top scoring student.

```{r}
which.max(ans)
```

> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
apply(hw,2,mean, na.rm=TRUE)
```

```{r}
ave.scores<-apply(hw,2,mean, na.rm=TRUE)
which.min(ave.scores)
```

```{r}
tot.scores<-apply(hw,2,sum, na.rm=TRUE)
which.min(tot.scores)
```

```{r}
tot.scores
ave.scores
```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
hw$hw1
```

```{r}
ans
```

```{r}
cor(hw$hw1, ans)
```

If I try on hw2 I get NA as there are missing homeworks (i.e. NA values)

```{r}
hw$hw2
```

I will mask all NA values to zero.

```{r}
mask<-hw
mask[is.na(mask)]<-0
```

Now we can find correlation.

```{r}
cor(mask$hw5, ans)
```

We can use the `apply()` function on the hw columns (i.e. individual homeworks) and pass it the overall scores for the class (in my `ans` object as an extra argument).

```{r}
apply(mask,2,cor,y=ans)
```








