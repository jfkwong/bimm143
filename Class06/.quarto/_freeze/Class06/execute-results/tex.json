{
  "hash": "89a21c73cebceaa72bbf2c80048c5066",
  "result": {
    "markdown": "---\ntitle: \"Class06: R Functions\"\nauthor: \"Juliane Kwong\"\nformat: pdf\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent1 <- c(100, 100, 100, 100, 100, 100, 100, 90)\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\n```\n:::\n\n\nWe can use the `mean()` function to calculate the average for a given student vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.75\n```\n:::\n:::\n\nUse argument `na.rm=TRUE` to remove NA values from the student scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student2,na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n:::\n\nWhat about student 3?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student3, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\nWe can replace the missed assignment NA values with a score of zero. Use the function `is.na()` to identify NA values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90 NA NA NA NA NA NA NA\n```\n:::\n\n```{.r .cell-code}\nis.na(student3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nwhich(is.na(student3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3 4 5 6 7 8\n```\n:::\n:::\n\nNow replace the NA values with a score of zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent3[is.na(student3)]<-0\nstudent3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90  0  0  0  0  0  0  0\n```\n:::\n:::\n\nUse temp object (`x`) so that original objects aren't ruined.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-student3\nx[is.na(x)]<-0\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11.25\n```\n:::\n:::\n\n\nFinally, we want to drop the lowest score before calculating the mean. This is equivalent to allowing the student to drop their worst assignment score. Use the `min()` function to identify the lowest score.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-student1\nmin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\nIdentify the location of the minimum using the function `which.min()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.min(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\nExclude the minimum score from the average.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#The 8th vector contains the lowest score, this will exclude the 8th vector from the list of scores.\nx[-8]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n:::\n\n\nUse the `-which.min()` function to drop the lowest score from the students scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-which.min(x)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 100 100 100 100 100 100\n```\n:::\n:::\n\n\nFind the mean that excludes the lowest score.\n\n::: {.cell}\n\n```{.r .cell-code}\nx<-student1\n\n#Map/Replace NA values to zero\nx[is.na(x)]<-0\n\n#Exclude the lowest score and calulate the mean\nmean(x[-which.min(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\nConvert the code snippets into a function called `grade()`.\n\nAll functions in R have at least 3 things:\n\n- **Name**, in our case \"grade\"\n- Input **arguments**, student1 etc.\n- **Body**, this is our working snippet above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade<-function(x){\n  #Map/Replace NA values to zero\n  x[is.na(x)]<-0\n\n  #Exclude the lowest score and calulate the mean\n  mean(x[-which.min(x)])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\nCan also use RStudio to create a function using code snippets. \nSelect `Code > Extract Function`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade <- function(x) {\n  x[is.na(x)]<-0\n  mean(x[-which.min(x)])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrade(student2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n:::\n\n\nRead example class gradebook in CSV format: “https://tinyurl.com/gradeinput”\n\n::: {.cell}\n\n```{.r .cell-code}\nurl<-\"https://tinyurl.com/gradeinput\"\nread.csv(url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            X hw1 hw2 hw3 hw4 hw5\n1   student-1 100  73 100  88  79\n2   student-2  85  64  78  89  78\n3   student-3  83  69  77 100  77\n4   student-4  88  NA  73 100  76\n5   student-5  88 100  75  86  79\n6   student-6  89  78 100  89  77\n7   student-7  89 100  74  87 100\n8   student-8  89 100  76  86 100\n9   student-9  86 100  77  88  77\n10 student-10  89  72  79  NA  76\n11 student-11  82  66  78  84 100\n12 student-12 100  70  75  92 100\n13 student-13  89 100  76 100  80\n14 student-14  85 100  77  89  76\n15 student-15  85  65  76  89  NA\n16 student-16  92 100  74  89  77\n17 student-17  88  63 100  86  78\n18 student-18  91  NA 100  87 100\n19 student-19  91  68  75  86  79\n20 student-20  91  68  76  88  76\n```\n:::\n\n```{.r .cell-code}\nhw<-read.csv(url,row.names=1)\n```\n:::\n\n\nWe can use the `apply()` function to grade all the students in this class with our new `grade()` function.\n\nThe `apply()` function allows us to run any function over either the rows or columns of a data.frame. \n\nFormat for `apply()`: apply(DATA, MARGIN=1, FUNCTION)\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(hw,1,grade)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n\n```{.r .cell-code}\n#Assign temp object to apply function\nans <- apply(hw,1,grade)\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n:::\n\n\n> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?\n\nUse the function `which.max()` to determine the highest score and top scoring student.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich.max(ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstudent-18 \n        18 \n```\n:::\n:::\n\n\n> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(hw,2,mean, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     hw1      hw2      hw3      hw4      hw5 \n89.00000 80.88889 80.80000 89.63158 83.42105 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nave.scores<-apply(hw,2,mean, na.rm=TRUE)\nwhich.min(ave.scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhw3 \n  3 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntot.scores<-apply(hw,2,sum, na.rm=TRUE)\nwhich.min(tot.scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhw2 \n  2 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntot.scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n hw1  hw2  hw3  hw4  hw5 \n1780 1456 1616 1703 1585 \n```\n:::\n\n```{.r .cell-code}\nave.scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     hw1      hw2      hw3      hw4      hw5 \n89.00000 80.88889 80.80000 89.63158 83.42105 \n```\n:::\n:::\n\n\n> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhw$hw1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 100  85  83  88  88  89  89  89  86  89  82 100  89  85  85  92  88  91  91\n[20]  91\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n student-1  student-2  student-3  student-4  student-5  student-6  student-7 \n     91.75      82.50      84.25      84.25      88.25      89.00      94.00 \n student-8  student-9 student-10 student-11 student-12 student-13 student-14 \n     93.75      87.75      79.00      86.00      91.75      92.25      87.75 \nstudent-15 student-16 student-17 student-18 student-19 student-20 \n     78.75      89.50      88.00      94.50      82.75      82.75 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(hw$hw1, ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4250204\n```\n:::\n:::\n\n\nIf I try on hw2 I get NA as there are missing homeworks (i.e. NA values)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhw$hw2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  73  64  69  NA 100  78 100 100 100  72  66  70 100 100  65 100  63  NA  68\n[20]  68\n```\n:::\n:::\n\n\nI will mask all NA values to zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmask<-hw\nmask[is.na(mask)]<-0\n```\n:::\n\n\nNow we can find correlation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(mask$hw5, ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6325982\n```\n:::\n:::\n\n\nWe can use the `apply()` function on the hw columns (i.e. individual homeworks) and pass it the overall scores for the class (in my `ans` object as an extra argument).\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mask,2,cor,y=ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      hw1       hw2       hw3       hw4       hw5 \n0.4250204 0.1767780 0.3042561 0.3810884 0.6325982 \n```\n:::\n:::\n",
    "supporting": [
      "Class06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}