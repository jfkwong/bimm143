---
title: "Class 7: Clustering and PCA"
author: "Juliane Kwong"
format: pdf
---

# Clustering

First let's make up some data to cluster so we can get a feel for these methods and how to work with them.

We can use the `rnorm()`function to get random numbers from a normal distribution around a given `mean`.

```{r}
hist(rnorm(5000, mean=3))
```

Let's get 30 points with a mean of 3 and another 30 with a mean of -3..

```{r}
tmp<-c(rnorm(30,mean=3),rnorm(30,mean=-3))
tmp
```

Put two of these together:
```{r}
x<-cbind(x=tmp,y=rev(tmp))
plot(x)
```

## K-means clustering.

Very popular clustering method that we can use with the `kmeans()` function in base R.

```{r}
km<-kmeans(x,centers=2)
km
```

Clustering vector helps to identify where a specific data point is in the plot.

```{r}
km$size
```

```{r}
tmp<-c(rnorm(30,-3),rnorm(30,3))
x<-data.frame(x=tmp,y=rev(tmp))
plot(x)
```

```{r}
km<-kmeans(x,center=2)
```
> Q. How many points are in each cluster?

> Q. What 'component' of your result object details
    - cluster size?
    
```{r}
km$size
```

   - cluster assignment?
```{r}
km$cluster
```

   - cluster center?
```{r}
km$centers
```

> Q. Plot x colored by the kmeans cluster assignment and add cluster centers as blue points.

```{r}
plot(x,col=km$cluster)
points(km$centers, col="blue",pch=15,cex=3)
```


> Q. Let's cluster into 3 groups or same `x` data and make a plot.

```{r}
km<-kmeans(x,center=3)
plot(x,col=km$cluster)
```

# Hierarchical CLustering

We can use the `hclust()` function for Hierarchical Clustering. Unlike `kmeans()`, where we could just pass in our data as input, we need to give `hclust()` a "distance matrix".


We will use the `dist()` function to start with.

```{r}
d<-dist(x)
hc<-hclust(d)
hc
```

```{r}
plot(hc)
```

I can now "cut" my tree with the `cutree()` to yield a cluster membership vector.

```{r}
grps<-cutree(hc,h=8)
grps
```

You can also tell `cutree()` to cut where it yields "k" groups.

```{r}
cutree(hc,k=2)
```

```{r}
plot(x,col=grps)
```

# Principal Component Analysis (PCA)

## PCA of UK food data

```{r}
url<-"https://tinyurl.com/UK-foods"
x <- read.csv(url,row.names=1)
x
```

Exploratory analysis 

```{r}
dim(x)
```

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

```{r}
pairs(x, col=rainbow(10), pch=16)
```

The main PCA function in base R is called `prcomp()` it expects the transpose (location) of our data.

```{r}
pca <- prcomp( t(x) )
summary(pca)
```

```{r}
attributes(pca)
```

```{r}
pca$x
```

```{r}
plot(pca$x[,1], pca$x[,2], 
     col=c("orange","red","blue","darkgreen"),
     pch=16)
```